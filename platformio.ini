# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32F1xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags, common.lib_deps and common.lib_extra_dirs
# below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e BTT_SKR_MINI_E3_V20 -e BTT_SKR_MINI_E3_V20_USB
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e bluepill_f103c8_128k -t upload
#    # Clean up build related resources
#    pio run -t clean
#
[platformio]
include_dir = Inc
src_dir = Src

[common]
build_flags =
  -I .
  -I boards
  -I FatFs
  -I FatFs/STM
  -I Drivers/FATFS/Target
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/App
  -I USB_DEVICE/Target
  -D BOARD_FLEXI_HAL=1
  -D HAS_BOOTLOADER=1  
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D _VOLUMES=1
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  # -D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  #-D DEBUG
  # Uncomment to enable support for keypad
  #-D KEYPAD_ENABLE=1
  # Uncomment to enable support for odometer
  #-D ODOMETER_ENABLE=1
  # Uncomment to enable support for running G-code from the microSD card
  # You also need to uncomment FatFS and sdcard in lib_deps (see below)
  #-D SDCARD_ENABLE=1
  # Set to 1 or 2 (see Inc/my_machine.h)
  #-D SPINDLE_HUANYANG=1
  -D HSE_VALUE=25000000
  -D NGC_EXPRESSIONS_ENABLE=1
  -D STRING_REGISTERS_ENABLE=1
  -D ENABLE_BACKLASH_COMPENSATION=1
  -D MINIMIZE_PROBE_OVERSHOOT=1
  -D DEFAULT_PLANNER_BUFFER_BLOCKS=128
  -D MEM_NUM_PBUF=24
  -D MEM_NUM_TCP_PCB=8
  -D PBUF_POOL_SIZE=12
  -D USE_SPI_DMA=1
  #-D ENABLE_SWD=1
  #-D MPG_ENABLE=1
  #-D DISPLAY_ENABLE=1
  #-D MACROS_ENABLE=2
  #-D N_MACROS=8
  -D ESTOP_ENABLE=1
  -D NVS_SIZE=16384
  #-D WEBUI_ENABLE=3
  #-D TX_BUFFER_SIZE=2048
  #-D BLOCK_TX_BUFFER_SIZE=128

  -D DEFAULT_ENABLE_SIGNALS_INVERT_MASK=7
  -D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=79
  -D DEFAULT_DOOR_IGNORE_WHEN_IDLE=1
  #-D DEFAULT_DOOR_KEEP_COOLANT_ON=1
  -D DEFAULT_JOG_LIMIT_ENABLE=1

  -D MAX_FEED_RATE_OVERRIDE=999
  -D MIN_FEED_RATE_OVERRIDE=1
  
  #Uncomment below if enabling http/webdav
  #-D LWIP_HTTPD_SUPPORT_POST=1
  #-D LWIP_HTTPD_DYNAMIC_HEADERS=1
  #-D LWIP_HTTPD_DYNAMIC_FILE_READ=1
  #-D LWIP_HTTPD_SUPPORT_11_KEEPALIVE=1

  '-D BOARD_NAME="FlexiHAL_20240604_060724"'  
    # Floating point support for printf, required for WebUI v3
  -Wl,-u,_printf_float
  -I lwip/src/include
  -I networking/wiznet
    # Floating point support for scanf, required for Spindle Linearization
  -Wl,-u,_scanf_float

lib_deps =
  boards
  bluetooth
  grbl
  keypad
  laser
  motors
  odometer
  lwip
  networking
  FatFs
  sdcard
  spindle
  embroidery
  probe_plugin
  rgb
  eeprom
  webui
  # USB serial support
  Core
  Class
  App
  Target
lib_extra_dirs =
  .
  FatFs
  Middlewares/ST/STM32_USB_Device_Library
  USB_DEVICE
  boards

[env]
platform = ststm32
platform_packages = framework-stm32cubef4 @ ~1.26.2
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off
board_build.mcu = stm32f446ret6
board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
grblhal_driver_version = 20240921_060724
extra_scripts = 
    post:extra_script.py
upload_protocol = stlink
debug_tool = stlink    

[env:f446re_flexi_cnc_ygang_eth_sd_prb_4x]
board = genericSTM32F446RE
custom_prog_version = YGANG_ETH_SD_PRB_4X
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D KEYPAD_ENABLE=1  
  -D N_AXIS=4    
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_printnc_eth_sd]
board = genericSTM32F446RE
custom_prog_version = PRINTNC_ETH_SD
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options 
  -D STATUS_LIGHT_ENABLE=1
  -D SAFETY_DOOR_ENABLE=1
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D N_SYS_SPINDLE=4
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500  
  -D KEYPAD_ENABLE=1  
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_printnc_eth_sd_4x]
board = genericSTM32F446RE
custom_prog_version = PRINTNC_ETH_SD_4X
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options 
  -D STATUS_LIGHT_ENABLE=1
  -D SAFETY_DOOR_ENABLE=1
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500  
  -D KEYPAD_ENABLE=1
  -D N_AXIS=4    
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_printnc]
board = genericSTM32F446RE
custom_prog_version = PRINTNC
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options 
  -D STATUS_LIGHT_ENABLE=1 
  -D SAFETY_DOOR_ENABLE=1
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D KEYPAD_ENABLE=1  
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_ygang_eth_sd_prb]
board = genericSTM32F446RE
custom_prog_version = YGANG_ETH_SD_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D KEYPAD_ENABLE=1  
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_3axis_eth_sd_prb]
board = genericSTM32F446RE
custom_prog_version = 3AXIS_ETH_SD_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D KEYPAD_ENABLE=1  
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_3axis_prb]
board = genericSTM32F446RE
custom_prog_version = 3AXIS_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D KEYPAD_ENABLE=1  
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_4axis_prb]
board = genericSTM32F446RE
custom_prog_version = 4AXIS_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D N_AXIS=4
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D KEYPAD_ENABLE=1  
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_5axis_prb]
board = genericSTM32F446RE
custom_prog_version = 5AXIS_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D N_AXIS=5
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D KEYPAD_ENABLE=1  
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}   

[env:f446re_flexi_cnc_4axis_eth_sd_prb]
board = genericSTM32F446RE
custom_prog_version = 4AXIS_ETH_SD_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D N_AXIS=4
  -D SPINDLE0_ENABLE=-1
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D KEYPAD_ENABLE=1
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D PROBE_PROTECT_ENABLE=1

lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}

[env:f446re_flexi_cnc_5axis_eth_sd_prb]
board = genericSTM32F446RE
custom_prog_version = 5AXIS_ETH_SD_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D N_AXIS=5
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D KEYPAD_ENABLE=1
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500    
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}   

[env:f446re_flexi_cnc_xgang_ygang_eth_sd_prb]
board = genericSTM32F446RE
custom_prog_version = XGANG_YGANG_ETH_SD_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D KEYPAD_ENABLE=1  
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}  

[env:f446re_flexi_cnc_xgang_eth_sd_prb]
board = genericSTM32F446RE
custom_prog_version = XGANG_ETH_SD_PRB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D VFD_ENABLE=-1
  -D MODBUS_ENABLE=1
  -D N_SPINDLE=12
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D KEYPAD_ENABLE=1  
  -D X_GANGED=1
  -D X_AUTO_SQUARE=1
  -D PROBE_PROTECT_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs} 

[env:f446re_flexi_cnc_eth_sd_emb]
board = genericSTM32F446RE
custom_prog_version = ETH_SD_EMB
; change microcontroller
#board_build.mcu = stm32f446ret6
#board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D SDCARD_ENABLE=2
  -D _WIZCHIP_=5500
  -D KEYPAD_ENABLE=1  
  -D EMBROIDERY_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs} 

# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
#upload_protocol = stlink
#debug_tool = stlink
